Method/Endpoint,HTTP Method,Type,Description,Parameters,Usage
/api/auth,POST,Authentication,Authenticate with OnlyFans using auth.json credentials,"auth: dict containing {id, cookie, x_bc, user_agent}","curl -X POST http://localhost:5000/api/auth -H 'Content-Type: application/json' -d '{""auth"": {""id"": ""123456"", ""cookie"": ""auth_cookie_value"", ""x_bc"": ""browser_check_token"", ""user_agent"": ""Mozilla/5.0...""}}'"
/api/health,GET,System,Check API server health status,None,curl http://localhost:5000/api/health
/api/docs,GET,Documentation,Get detailed API documentation with examples,None,curl http://localhost:5000/api/docs
/api/me,GET,User Info,Get authenticated user's profile information,None (requires authentication),curl http://localhost:5000/api/me
/api/user/{username},GET,User Info,Get any user's public profile information by username or ID,username: str (can be username or user ID),curl http://localhost:5000/api/user/johndoe
/api/user/{username}/posts,GET,Content,Retrieve posts from a specific user's timeline,"username: str, limit: int (1-100, default 50), offset: int (default 0)",curl 'http://localhost:5000/api/user/johndoe/posts?limit=20&offset=0'
/api/user/{username}/messages,GET,Messages,Get direct message conversation history with a user,"username: str, limit: int (1-100, default 20), offset_id: int (optional - message ID to start from), cutoff_id: int (optional - message ID to stop at)",curl 'http://localhost:5000/api/user/johndoe/messages?limit=30&offset_id=123456&cutoff_id=789012'
/api/user/{username}/stories,GET,Content,Get active stories from a user's profile,username: str,curl http://localhost:5000/api/user/johndoe/stories
/api/user/{username}/highlights,GET,Content,Get story highlights (saved stories) from a user,username: str,curl http://localhost:5000/api/user/johndoe/highlights
/api/user/{username}/mass-messages,GET,Messages,Get mass/promotional messages sent by a specific user,"username: str, message_cutoff_id: int (optional - get messages after this ID)",curl 'http://localhost:5000/api/user/johndoe/mass-messages?message_cutoff_id=12345'
/api/user/{username}/archived-stories,GET,Content,Get archived stories (only available for authenticated user),"username: str, limit: int (1-100, default 100), offset: int (default 0)",curl 'http://localhost:5000/api/user/myusername/archived-stories?limit=50'
/api/user/{username}/socials,GET,Social,Get user's linked social media accounts (Twitter/Instagram/etc),username: str,curl http://localhost:5000/api/user/johndoe/socials
/api/subscriptions,GET,Subscriptions,Get list of all active subscriptions,"limit: int (1-100, default 50), offset: int (default 0)",curl 'http://localhost:5000/api/subscriptions?limit=100&offset=0'
/api/chats,GET,Messages,Get all chat conversations with basic info and last message,"limit: int (1-100, default 50), offset: int (default 0)",curl 'http://localhost:5000/api/chats?limit=20&offset=0'
/api/mass-messages,GET,Messages,Get statistics for all mass messages sent by authenticated user,"limit: int (1-100, default 50), offset: int (default 0)",curl 'http://localhost:5000/api/mass-messages?limit=50&offset=0'
/api/user/{username}/message,POST,Messages,Send a direct message to a specific user,"username: str, text: str (message content), media_ids: list[int] (optional media attachments)","curl -X POST http://localhost:5000/api/user/johndoe/message -H 'Content-Type: application/json' -d '{""text"": ""Hello! Love your content"", ""media_ids"": []}'"
/api/post/{post_id}/like,POST X,Interaction,Like a specific post by ID,post_id: int,curl -X POST http://localhost:5000/api/post/123456789/like
/api/post/{post_id}/like,DELETE X,Interaction,Unlike a previously liked post,post_id: int,curl -X DELETE http://localhost:5000/api/post/123456789/like
/api/user/{user_id}/block,POST,User Management,Block a user by their ID,user_id: int,curl -X POST http://localhost:5000/api/user/987654/block
/api/user/{user_id}/block,DELETE,User Management,Unblock a previously blocked user,user_id: int,curl -X DELETE http://localhost:5000/api/user/987654/block
/api/transactions,GET,Financial,Get all financial transactions history,None,curl http://localhost:5000/api/transactions
/api/paid-content,GET,Financial,Get all purchased premium content (posts and messages),"performer_id: int|str (optional - filter by creator), limit: int (1-100, default 10), offset: int (default 0)",curl 'http://localhost:5000/api/paid-content?performer_id=123456&limit=20'
/api/vault,GET,Vault,Get media items stored in your private vault,"limit: int (1-100, default 50), offset: int (default 0)",curl 'http://localhost:5000/api/vault?limit=100&offset=0'
/api/promotions,GET,Promotions,Get current subscription promotions from authenticated user's profile,None,curl http://localhost:5000/api/promotions
/api/messages/mass-send/,POST,Messages,,,
/api/messages/all,GET,Messages,,,
,,,,,
Purchase/Financial:,,,,,
,,,,,
  1. user.buy_subscription() - Subscribe to a user,,,,,
  2. post.buy_ppv() - Buy/unlock a PPV post,,,,,
  3. message.buy_message() - Buy/unlock a PPV message,,,,,
  4. user.subscription_price() - Get subscription price (including promotions),,,,,
  5. auth.get_w9_form() - Get W9 tax form,,,,,
,,,,,
  Search Functions:,,,,,
,,,,,
"  6. user.search_chat(query, limit) - Search within a specific chat",,,,,
"  7. user.search_messages(query, limit) - Search messages with a user",,,,,
"  8. user.get_message_by_id(chat_id, message_id) - Get specific message by ID",,,,,
,,,,,
  Media/Content:,,,,,
,,,,,
  9. user.get_avatar() - Get user's avatar URL,,,,,
  10. user.get_header() - Get user's header/banner image,,,,,
  11. user.get_spotify() - Get user's linked Spotify,,,,,
  12. user.get_paid_contents(content_type) - Get all paid content from a user,,,,,
  13. post.get_comments() - Get comments on a post,,,,,
  14. post.favorite() - Add post to favorites (different from like),,,,,
,,,,,
  User Management:,,,,,
,,,,,
  15. auth.get_lists() - Get user lists (like Twitter lists),,,,,
  16. auth.get_blacklist() - Get blacklisted users,,,,,
  17. auth.get_lists_users(list_id) - Get users in a specific list,,,,,
  18. auth.get_scrapable_users() - Get all users available for scraping,,,,,
  19. auth.get_login_issues() - Get any login/auth issues,,,,,
,,,,,
  Vault:,,,,,
,,,,,
  20. auth.get_vault_lists() - Get vault lists/categories (already have vault media endpoint),,,,,
,,,,,
  Posts:,,,,,
,,,,,
"  21. user.get_post(post_id) - Get single post by ID (wait, this might be exposed as /api/post/{post_id})",,,,,
"  22. message.reply(text, price, media_ids, locked_text)",,,,,
